#include <sys/epoll.h>
#include<stdlib.h>
#include<string.h>
#include<stdio.h>
#include<unistd.h>
#include<arpa/inet.h>
#include<ctype.h>
#include<sys/types.h>
#include<fcntl.h>
#include<event2/event.h>
#include<sys/stat.h>

#include"wrap.h"

#define SERV_PORT 9527
#define MAX_EVENTS 1024
void do_accept(int lfd, int epfd)
{
    struct sockaddr_in clie_addr;
    socklen_t clie_addr_len = sizeof(clie_addr);
    int cfd = Accept(lfd,  (struct sockaddr *)&clie_addr, &clie_addr_len);

    char client_ip[64] = {0};
    printf("client IP = %s, port = %d, cfd = %d\n",inet_ntop(AF_INET, &clie_addr.sin_addr.s_addr,client_ip, sizeof(client_ip)),ntohs(clie_addr.sin_port), cfd);
    //设置cfd非阻塞
    int flag = fcntl(cfd, F_GETFL);
    flag |= O_NONBLOCK;
    fcntl(cfd, F_SETFL, flag);

    struct epoll_event ev;
    ev.events = EPOLLIN | EPOLLET;
    ev.data.fd = cfd;

    int ret = epoll_ctl(epfd, EPOLL_CTL_ADD, cfd, &ev);
    if(ret == -1){
        perror("epoll_ctl error\n");
        exit(1);
    }

    return ;

}
void do_read(int rfd, int epfd)
{
    // read cfd 小 -- 大 write 回
    //读取一行http协议, 拆分, 获取 get 文件名 协议号

}
int init_listen(int port, int epfd)
{
    int lfd = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in serv_addr;
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(port);
    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);

    int opt = 1;
    setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, (void *)&opt, sizeof(opt));


    Bind(lfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));

    Listen(lfd, 128);

    struct epoll_event ev;
    ev.events = EPOLLIN;
    ev.data.fd = lfd;

    int ret = epoll_ctl(epfd, EPOLL_CTL_ADD, lfd, &ev);
    if(ret == -1){
        perror("epoll_ctl error\n");
        exit(1);
    }

    return lfd;
}
void epoll_run(int port)
{
    struct epoll_event all_events[MAX_EVENTS];

    int epfd = epoll_create(MAX_EVENTS);
    if(epfd == -1){
        perror("epoll_create error\n");
        exit(1);
    }

    int lfd = init_listen(port, epfd);

    while(1){
        int ret = epoll_wait(epfd, all_events, MAX_EVENTS, -1);
        if(ret == -1){
            perror("epoll_wait error\n");
            exit(1);
        }

        for(int i = 0; i < ret; i++){
            struct epoll_event *pev = &all_events[i];

            if(!(pev->events & EPOLLIN)){
                continue;
            }

            if(pev->data.fd == lfd){
                do_accept(lfd, epfd);
            }else{
                do_read(pev->data.fd, epfd);
            }
        }
    }

    return ;
}
int main(int argc, char *argv[])
{
    if(argc < 3){
        printf("please input : ./a port path\n");
    }

    int port = atoi(argv[1]);
    int ret = chdir(argv[2]);
    if(ret != 0){
        perror("chdir error\n");
        exit(1);
    }

    epoll_run(port);

    return 0;
}
                     
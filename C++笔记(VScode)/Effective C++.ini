Effective C++
条款01：
    C++是一个由相关语言组成的联邦，而非单一语言：
        C
            C++是以C语言为基础

        Object-Oriented C++。
            面向对象：classes(包括构造函数，析构函数)
                    封装、继承、多态、virtual函数(动态绑定)
        
        Template C++
            泛型编程

        STL
            容器、迭代器、算法、函数对象
        
条款02：
    尽量以const,enum,inline替换 #define AAA 1.653
        const:
            名称AAA可能没进入记号表内，错误信息可能提示1.653而不是AAA
            解决：
                const double AAA = 1.653；
            特殊情况：
                定义常量指针：
                    const char* const authorName = "Scott Meyers";
                    const string authorName("Scott Meyers");    更好
                class专属常量：
                    为了将常量的作用域(scope)限制于class内，必须让它成为class的一个成员、
                    为确保至多只有一份实体，必须成为static成员(有点像单例模式)
                    class GamePlayer{
                    private:
                        static const int Num = 5;
                    }
                    有的编译器不支持声明static成员时赋初值，则可位于实现文件内，类中只做声明

        enum hack
            如果需要static一个数组(数组初始化时必须知道大小)，如果编译器不允许初始化大小，则采用enum
            class GamePlayer{
            private:
                enum{ Num = 5 };
                int scores[Num];
            }
            enum hack的行为某方面比较像#defie而不像const 取const地址合法，但取enum地址不合法，取#define通常也不合法
            枚举类型本身不会占用内存空间，而枚举的对象会占用内存空间

            enum hack 是 模板元编程的基础技术

        inlinu:
            以它实现宏，宏看起来像函数，但不会招致函数调用。宏夹带着宏实参，调用函数f
                #define CALL_WITH_MAX(a,b) f((a) > (b) ? (a) : (b))
                int a=5,b=0;
                CALL_WITH_MAX(++a, b);  //a被累加两次
                CALL_WITH_MAX(++a, b+10);   //a被累加一次
            
            解决：
                template<typename T>
                inline void callWithMax(const T& a, const T& b){
                    f(a > b ? a : b);
                }

    对于单纯常量，最好以const对象或enums替换#defines
    对于形似函数的宏，最好改用inline函数替换#defines


条款03：
条款04：
条款05：
条款06：
条款07：
条款08：
条款09：
条款10：
条款11：
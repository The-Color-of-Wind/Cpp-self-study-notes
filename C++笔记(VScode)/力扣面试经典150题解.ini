力扣面试经典150题解
1、合并两个有序数组
    第一次没考虑时间，直接vector自带插入和sort
        for (int i = m, j = 0; i < m + n; i++)
		    nums1[i] = nums2[j++];
	    sort(nums1.begin(), nums1.end());

    后来考虑时间，因为两个数组有序，且第一个数组空间足够，想到了归并算法
        int k = m + n - 1;
	    --m; --n;
	    while (m > -1 && n > -1)
	    {
		    nums1[k--] = nums1[m] > nums2[n] ? nums1[m--] : nums2[n--];
	    }
        while (m > -1) nums1[k--] = nums1[m--];
        while (n > -1) nums1[k--] = nums2[n--];

2、原地删除元素：
	第一次删除元素，后数整体前移一位，再在当前位置开始遍历
	for (int i = 0; i < nums.size(); i++)
			{
				if (nums[i] == val) 
				{
					for (int j = i; j < nums.size()-1; j++)
					{
						nums[j] = nums[j + 1];
					}
					nums.pop_back();
					i--;
				}
			}
			return nums.size();

	将要删除元素放到最后
	int removeElement(vector<int>& nums, int val) {
			
			if (nums.size() == 0)
			{
				return 0;
			}

			int i = 0;
			int j = nums.size() - 1;

			while (nums[j] == val)
			{
				--j;
				if (j == -1)
				{
					return ++j;
				}
			}
			for (i = 0; i < j; i++)
			{
				if (nums[i] == val)
				{
					nums[i] = nums[j];
					nums[j] = val;
					--j;
				}
				while (nums[j] == val)
				{
					--j;
				}
			}
			return j+1;
		}

	官方题解：
	相同元素不管，指针后移
	class Solution {
	public:
    int removeElement(vector<int>& nums, int val) {
        int n = nums.size();
        int left = 0;
        for (int right = 0; right < n; right++) {
            if (nums[right] != val) {
                nums[left] = nums[right];
                left++;
            }
        }
        return left;
    }
	};


3、删除有序数组中的重复项
	跟第二题官方题解思想一样
	class Solution {
	public:
		int removeDuplicates(vector<int>& nums) {
			int n = nums.size();
				int left = 0;
				for (int right = 0; right < n; right++)
				{
					if (nums[right] != nums[left])
					{
						left++;
						nums[left] = nums[right];
					}
				}
				return left+1;
		}
	};

4、删除有序数组中的重复项 II
			int n = nums.size();
			int left = 0;
			int nu = 1;
			for (int right = 1; right < n; right++)
			{
				
				if (nums[right] != nums[left])
				{
					nu = 1;
					left++;
					nums[left] = nums[right];
				}
				else 
				{
					if (nu < 2)
					{
						left++;
						nums[left] = nums[right];
						nu++;
					}
				}
			}
			return left+1;

	官方题解：判断慢指针前两位，和快指针是否相同（妙）

5、多数元素
	先排序，从头开始超过n/2个的元素就是
	int majorityElement(vector<int>& nums) {
			int n = nums.size();
			sort(nums.begin(), nums.end());
			for (int i = 0; i < n; i++)
			{
				if (nums[i] == nums[(n / 2) + i])
				{
					return nums[i];
				}
			}
			return 0;
		}

	一定在中间，所以返回n/2即可

	最优解：

6、轮转数组
	暴力求解，超时

	观察他的存放位置
	newArr[(k + i) % n] = nums[i];
最优解：


7、买卖股票的最佳时机
	左指针指向买入，右指针指向卖出
	如果卖出-买入>0 说明卖出价格 > 买入价格 继续遍历后续卖出是否利润更大
	如果卖出-买入<0 说明卖出当天价格更低，则在right天买入， 继续遍历后续卖出
	int max = 0;
			int left = 0;
			int right = 1;
			while (right<n)
			{
				int diff = prices[right] - prices[left];
				if (diff > 0)
				{
					right++;
					if(diff>max)
						max = diff;
				}
				else
				{
					left = right;
					right++;
				}
			}
	题解：
		int minprice = inf, maxprofit = 0;
		for (int price : prices) {
			maxprofit = max(maxprofit, price - minprice);
			minprice = min(price, minprice);
		}	
8、买卖股票的最佳时机2
交易没限制，所有利润加一起
	class Solution {
	public:
		int maxProfit(vector<int>& prices) {
			int n = prices.size();
			int max = 0;
			for (int i = 1; i < n; i++)
			{
				if (prices[i] - prices[i - 1] > 0)
				{
					max += (prices[i] - prices[i - 1]);
				}
			}
			return max;
		}
	};

	

9、跳跃游戏
逐步找到所能达到的最远距离
class Solution {
	public:
		bool canJump(vector<int>& nums) {
			int k = 0;
			int n = nums.size();
			for (int i = 0; i < n; i++)
			{
				if (i > k)
					return false;
				k = max(k, i+nums[i]);
			}
			return true;
		}
	};
	

	H 指数
	暴力求解：
		class Solution {
		public:
			int hIndex(vector<int>& citations) {
				int n = citations.size();
				int h = 0;
				for (int i = 0; i < n; i++)
				{
					int nu = 0;
					for (int j = 0; j < n; j++)
					{
						if ((i+1) <= citations[j])
						{
							nu++;
						}
					}
					if (nu >= (i + 1))
						h = (i + 1);
				}
				return h;
			}
		};
二分查找
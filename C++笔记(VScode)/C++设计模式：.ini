C++设计模式：

一、UML
    1、参与者：使用该系统的人或事物
    
    2、用例：代表系统的某项完整的功能
        关系：
            泛化关系：表示同一业务目的(父用例)的不同技术实现(各个子用例)
                    空心三角    支付宝支付  指向    支付
                            微信支付    指向    支付

            包含关系：一个用例可以包含其他用例具有的行为
                    include     添加信息    指向    更新数据库
                                修改信息    指向    更新数据库

            扩展关系：完成某个功能的时候偶尔会执行另外一个功能
                    extend      保存成绩    指向    打印成绩单（不一定执行）

    3、类图：显示系统中的类，接口，及它们之间的关系
        关系：
            泛化关系：继承  
                    (空心三角)
                        空心三角指向父类
            实现关系：类与接口之间的实现关系
                    (虚线空心三角)
            
            依赖关系：两个相对独立的系统，一个系统负责构造另一个系统的实例，或者依赖另一个系统的服务时，两系统之间体现为依赖关系
                    (虚线箭头)  car类作为 person类 的函数参数，person指向(依赖)car
                        依赖的一方指向被依赖的一方

            关联关系：一个系统实例与另一个系统的一些特定实例存在固定的对应关系
                    (实线箭头)  car类作为 person类 的变量
                                （每个订单对应特定的客户，每个客户对应一些特定的订单）
                                person类中的方法中 将 car类对象作为其局部变量
                分为：单向关联、双向关联、自关联
                        car类作为person类的成员遍历
                        箭头指向car类

            聚合关系：是关联关系的一种，是更强的关联关系
                     是整体和部分之间的关系
                     (空菱形)电脑包含cpu和硬盘；电脑析构，但cpu硬盘还存在
                        菱形指向整体
            组合关系：(强聚合)公司 和 部门
                     (实心菱形)公司没了，部门也不存在了
                        菱形指向整体
        关系强弱：继承 > 组合 > 聚合 > 关联 > 依赖
        多个关系就画一个最强的即可

二、设计模式
    原则目的：高内聚、低耦合
    原则：
        单一职责原则：类的职责单一，对外只提供一种功能，引起类变化的原因只有一个
        开闭原则：对扩展开发，对修改关闭。类的改动是通过增加代码进行，而不是修改源代码
        里氏代换原则：（多态）任何抽象类出现的地方都可以用他的实现类进行替换（实际就是虚拟机之，语言级别实现面向对象功能）
        依赖倒转原则：依赖于抽象(接口)，不要依赖具体的实现(类)，针对接口编程
        接口隔离原则：一个接口只提供一种对外功能
        合成复用原则：能有组合就不要有继承
        迪米特法则(最少知识法则)：一个对象应当对其他对象尽可能少的了解
                   对象相互调用是，提供一个统一的接口实现，不需要了解另一个模块的内部实现细节，这样模块内部改变时，不影响其他使用(黑盒原理)

        优先使用对象组合，而不是类继承
        封装变化点：一侧变化修改，一侧稳定


    
Linux系统编程：


vim基本操作：
    跳转和删字符：
        i 进入编辑模式，光标前插入字符
        a 进入编辑模式，光标后插入字符
        o 进入编辑模式，光标所在行的下一行插入
        I 进入编辑模式，光标所在行的行首插入
        A 进入编辑模式，光标所在行的行末插入字符
        O 进入编辑模式，光标所在行的上一行插入字符
        s 删除光标所在字符并进入编辑模式
        S 删除光标所在行并进入编辑模式


        x 删除光标所在字符，工作模式不变
        dw 删除光标所在单词，要求光标在首字母上，如果不在首字母，只会删除当前位置到单词末，工作模式不变
        D  删除光标所在位置到行末，工作模式不变
        0(数字) 光标移到行首，工作模式不变
        $ 光标移到行尾，工作模式不变
        d0 删除光标所在位置到行首，工作模式不变
        d$ 删除光标所在位置到行末，工作模式不变



    删除；
        1、单个字符删除：
            x   ==>     删除，并进入编辑模式

            r   ==>     按r，再输入替换的字符（命令模式）
        2、删除指定区域
            v   ==>     使用hjkl挪移光标选中删除区域，按d删除（命令模式）
            dd  ==>     删除指定行 
            3dd ==>     删除3行
            D,d$  ==>     删除光标后的字符
            d0  ==>     删除光标前的字符
            dw  ==>     删除一个单词

gcc编译
    预处理、编译、汇编、链接
    1、预处理：hello.c ==> hello.i      gcc-E
        展开宏、头文件
        替换条件编译
        删除注释、空行、空白
    2、编译： ==>  hello.s              gcc-S
        检查语法规范
        （消耗时间、系统资源最多）
    3、汇编： ==>  hello.o              gcc-c
        将汇编指令翻译成机器指令
    4、链接： ==>  a.out                无参数
        数据段合并
        地址回填

静态库制作及使用步骤：
    1、将.c 生成 .o 文件
        gcc -c add.c -o add.o
    2、使用ar工具制作静态库
        ar rcs lib库名.a add.o sub.o
    3、编译静态库到可执行文件中：
        gcc tst.c lib库名.a -o a.out

动态库制作及使用：
    1、将.c 生成 .o 文件 （生成与位置无关的代码 -fPIC）
        gcc -c add.c -o add.o -fPIC
    2、使用 gcc -shared 制作动态库
        gcc -shared -o lib库名.so add.o sub.o
    3、编译可执行程序是，指定所使用的动态库。 -l: 指定库名  -L:指定库路径
        gcc test.c -o a.out -l库名 -L./lib
    4、运行可执行程序 ./a.out 出错
        原因：
            链接器：    工作于链接阶段，工作时需要 -l -L
            动态链接器： 工作与程序运行阶段，工作时需要提供动态库所在目录位置。
                        
                    1、  
                        通过环境变量： export LD_LIBRARY_PATH=动态库路径
                        ./a.out  成功！！！
                    注： 临时生效，终端重启环境变量失效

                    2、
                        永久生效： 写入终端配置文件  .bashrc
                        vi ~/.bashrc
                        写入 export LD_LIBRARY_PATH=动态库路径（建议使用绝对路径） 保存
                        . .bashrc   /  source .bashrc  /  重启终端   ==》 让修改后的.bashrc生效
                        成功！！
                    3、


makefile：
    基础规则
        makefile： 管理项目。

            命名：makefile	 Makefile  --- make 命令

            1 个规则：

                目标：依赖条件
                （一个tab缩进）命令

                1. 目标的时间必须晚于依赖条件的时间，否则，更新目标

                2. 依赖条件如果不存在，找寻新的规则去产生依赖条件。

            ALL：指定 makefile 的终极目标。


            2 个函数：

                src = $(wildcard ./*.c): 匹配当前工作目录下的所有.c 文件。将文件名组成列表，赋值给变量 src。  src = add.c sub.c div1.c 

                obj = $(patsubst %.c, %.o, $(src)): 将参数3中，包含参数1的部分，替换为参数2。 obj = add.o sub.o div1.o

            clean:	(没有依赖)

                -rm -rf $(obj) a.out	“-”：作用是，删除不存在文件时，不报错。顺序执行结束。

            3 个自动变量：

                $@: 在规则的命令中，表示规则中的目标。

                $^: 在规则的命令中，表示所有依赖条件。

                $<: 在规则的命令中，表示第一个依赖条件。如果将该变量应用在模式规则中，它可将依赖条件列表中的依赖依次取出，套用模式规则。

            模式规则：

                %.o:%.c
                gcc -c $< -o %@

            静态模式规则：

                $(obj):%.o:%.c
                gcc -c $< -o %@	

            伪目标：

                .PHONY: clean ALL

            参数：
                -n：模拟执行make、make clean 命令。

                -f：指定文件执行 make 命令。				xxxx.mk


系统编程：
    open函数：
        int open(char *pathname, int flags)	#include <unistd.h>
        参数：
            pathname: 欲打开的文件路径名
            flags：文件打开方式：	#include <fcntl.h>
                O_RDONLY|O_WRONLY|O_RDWR	O_CREAT|O_APPEND|O_TRUNC|O_EXCL|O_NONBLOCK ....
        返回值：
            成功： 打开文件所得到对应的 文件描述符（整数）
            失败： -1， 设置errno	
        int open(char *pathname, int flags， mode_t mode)		123  775	
        参数：
            pathname: 欲打开的文件路径名
            flags：文件打开方式：	O_RDONLY|O_WRONLY|O_RDWR	O_CREAT|O_APPEND|O_TRUNC|O_EXCL|O_NONBLOCK ....
            mode: 参数3使用的前提， 参2指定了 O_CREAT。	取值8进制数，用来描述文件的 访问权限。 rwx    0664
                创建文件最终权限 = mode & ~umask
        返回值：
            成功： 打开文件所得到对应的 文件描述符（整数）
            失败： -1， 设置errno	

    close函数：
        int close(int fd);
    
    错误处理函数：		与 errno 相关。
        printf("xxx error: %d\n", errno);
        char *strerror(int errnum);
            printf("xxx error: %s\n", strerror(errno));
        void perror(const char *s);
            perror("open error");

    read函数：
        ssize_t read(int fd, void *buf, size_t count);
        参数：
            fd：文件描述符
            buf：存数据的缓冲区
            count：缓冲区大小
        返回值：
            0：读到文件末尾。
            成功；	> 0 读到的字节数。
            失败：	-1， 设置 errno
            -1： 并且 errno = EAGIN 或 EWOULDBLOCK, 说明不是read失败，而是read在以非阻塞方式读一个设备文件（网络文件），并且文件无数据。

    write函数：
        ssize_t write(int fd, const void *buf, size_t count);
        参数：
            fd：文件描述符
            buf：待写出数据的缓冲区
            count：数据大小
        返回值：
            成功；	写入的字节数。
            失败：	-1， 设置 errno
    
    文件描述符：
        PCB进程控制块：本质 结构体。
        成员：文件描述符表。
        文件描述符：0/1/2/3/4。。。。/1023     表中可用的最小的。
        0 - STDIN_FILENO
        1 - STDOUT_FILENO
        2 - STDERR_FILENO

    阻塞、非阻塞：  是设备文件、网络文件的属性。
        产生阻塞的场景。 读设备文件。读网络文件。（读常规文件无阻塞概念。）
        /dev/tty -- 终端文件。
        open("/dev/tty", O_RDWR|O_NONBLOCK)	--- 设置 /dev/tty 非阻塞状态。(默认为阻塞状态)

    fcntl：
        int (int fd, int cmd, ...)
        int flgs = fcntl(fd,  F_GETFL);
        flgs |= O_NONBLOCK
        fcntl(fd,  F_SETFL, flgs);
        获取文件状态： F_GETFL
        设置文件状态： F_SETFL

    lseek函数：
        off_t lseek(int fd, off_t offset, int whence);
        参数：
            fd：文件描述符
            offset： 偏移量
            whence：起始偏移位置： SEEK_SET/SEEK_CUR/SEEK_END
        返回值：
            成功：较起始位置偏移量
            失败：-1 errno
        应用场景：	
            1. 文件的“读”、“写”使用同一偏移位置。
            2. 使用lseek获取文件大小
            3. 使用lseek拓展文件大小：要想使文件大小真正拓展，必须引起IO操作。
                使用 truncate 函数，直接拓展文件。	int ret = truncate("dict.cp", 250);

    传入参数：
        1. 指针作为函数参数。
        2. 同常有const关键字修饰。
        3. 指针指向有效区域， 在函数内部做读操作。

    传出参数：
        1. 指针作为函数参数。
        2. 在函数调用之前，指针指向的空间可以无意义，但必须有效。
        3. 在函数内部，做写操作。
        4。函数调用结束后，充当函数返回值。

    传入传出参数：
        1. 指针作为函数参数。
        2. 在函数调用之前，指针指向的空间有实际意义。
        3. 在函数内部，先做读操作，后做写操作。
        4. 函数调用结束后，充当函数返回值。

    void aaa();
    int aaa(int *p, struct stat *p2, strcut student *p3);
    bbb()
    {
        aaa();
    }
    stat/lstat 函数：
        int stat(const char *path, struct stat *buf);
        参数：
            path： 文件路径
            buf：（传出参数） 存放文件属性。
        返回值：
            成功： 0
            失败： -1 errno
        获取文件大小： buf.st_size
        获取文件类型： buf.st_mode
        获取文件权限： buf.st_mode
        符号穿透：stat会。lstat不会。

    link/unlink:
        隐式回收。

    目录操作函数：
        DIR * opendir(char *name);
        int closedir(DIR *dp);
        struct dirent *readdir(DIR * dp);
            struct dirent {
                inode
                char dname[256];
            }


c++黑马入门笔记
一、语言基础
    1、float
        float f1 = 3.14;    //编译器默认3.14是双精度（double），看到float后再进行转换
        所以：定义float类型变量时
            float f1 = 3.14f;   //直接默3.14是单精度（float）少一步转换

    2、科学计数法
        float f2 = 3e2;     //3 * 10^2
        float f3 = 3e-2;    //3 * 10^-2  =  3*0.1^2

    3、默认情况下，输出一个小数，会显示6位有效数字

    4、水平制表符 \t（占8个）
        cout << "aaaa\tbbb"<<endl;  //aaaa后面4个空格
        cout << "aaa\tbbb"<<endl;   //aaaa后面5个空格
        cout << "aa\tbbb"<<endl;    //aaaa后面6个空格
        三个输出结果，bbb是对齐的

    5、字符串：
        c风格： char a[] = "hello world";
        c++风格： string str = "hello world";
        最后都有一个空字符'\0'
    
    6、输出bool类型、true、false 都是0或1；

    7、两个小数不可以做取模运算，不可以模0

    8、goto语句
        goto FLAG;
        ...  //goto直接跳转到标记的位置，中间不运行
        FLAG:
    
    9、空指针指向00000000，不能访问报异常
      0-255之间的内存编号是系统占用的，故不可访问

    10、野指针：指针变量指向非法的内存空间
        int *p = (int *)0x1100;

    11、struct创建变量是，关键字可以省略
    struct student s;  ==   student s;

二、核心编程
    1、内存分区模型
        代码区：
            编译后出现
            共享的（运行后内存中只有一份代码）
            只读的，方式意外修改指令
        全局区：
            编译后出现
            全局变量、静态变量、常量（字符串常量、全局常量在此，局部常量不在）存放在此
            该区域的数据再程序结束后由操作系统释放
        栈区:
            程序运行后
            由编译器自动分配释放
            
            存放函数的参数值、局部变量等
            不要返回局部变量的地址（栈区的数据在函数执行完后自动释放）
        堆区：
            由程序员分配释放，若程序员不释放，程序结束时由操作系统回收
            利用new关键字，可以将数据开辟到堆区
            
    
    2、new关键字
        int *p = new int(10);   //返回开辟空间的地址值
        delete P;  //释放内存
        
        int *arr = new int[10];    //数组
        delete[] arr;  //释放堆区数组

        如果new出一个对象，则必须要delete，否则编译器不会调用析构函数

函数高级：
    1、函数默认参数：int func(int a, int b = 10, int c = 20)
        1、如果某个位置的参数有默认值，则从此往后的所有参数都必须有默认值
        2、函数声明和函数实现只能有一个有默认参数，不能同时都设置默认参数

    2、函数的占位参数：int func(int a, int)
        1、调用函数时，必须要填补该位置：int b = func(10,20);
        2、占位参数也可以设默认值：int func(int a, int = 10)
            调用时就不需要填补：int b = func(10);

    3、函数重载：函数名可以相同，提高复用性
        条件：同一个作用域下、函数名相同、函数参数类型或个数或顺序不同
        注：
            1、仅函数的返回值不同不是重载（报错）
            2、函数重载遇上默认参数，会出现二义性，报错
                int func(int a, int b = 0);
                int func(int a);
                可以定义，但使用的时候func(10);会报错
            
            3、void fun(const int a)   和  void fun(int a)  报错（用实参初始化形参时会忽略顶层const）
               void fun(const int &a)   和  void fun(int &a)  可以，因为引用包含底层const


类和对象：
一、封装：
    1、 格式：
        class Student
        {
            public：

            privat：

        }；

        Student stu;  //实例化具体Student类变量stu

    2、访问权限：
        public：    成员  类内可以访问，类外可以访问
        protect：   成员  类内可以访问，类外不可以访问，子可以访问父的保护成员
        private：   成员  类内可以访问，类外不可以访问，子不可以访问父的私有成员

    3、struct 和 class区别：
        1、struct默认权限为公共  class默认权限为私有

二、对象特性
    4、对象的初始化和清理：（这两个函数编译器会提供，但提供的都是空实现。编译器会自动调用）
        一、构造函数：类名(){}
        （1）普通构造
	        1、无参构造
	            Complex()
	            {
	    	        cout << "构造" << endl;
	            }
	        2、有参构造
	            Complex(int a )
	            {
	            	this->a = a;
	            	cout << "构造" << a << endl;
	            }

	        3、拷贝构造，必须用引用接收，加const
	            Complex(const Complex &c)
	            {
	            	//把传入对象的所有属性拷贝到我身上
	            	a = c.a;
	            	cout << "kaobei构造" << a << endl;
	            }
        2、构造函数的调用
        （1）括号法（常用）
	        Complex com1;
	        Complex com2(20);       //有参构造
	        Complex com3(com2);     //拷贝构造
	    注：
	        Complex com1();  //编译器会认为是一个函数声明，不会认为在创建对象
	    
        （2）显示法
	        Complex com1;
	        Complex com2 = Complex(20);     //有参构造
	        Complex com3 = Complex(com2);   //拷贝构造
            
            Complex(20); //匿名对象  特点：当前行执行结束后，系统会立即回收掉匿名对象
        注：
	        不要利用拷贝构造函数 来 初始化匿名对象
	      × Complex(com2);   等价于    Complex com2; 造成重定义
        
        （3）隐式转换法
            Complex com4 = 10;      //有参构造
	        Complex com4 = com1;	//拷贝构造
        
        3、拷贝构造函数调用时机
            1、使用一个已经创建完毕的对象来初始化一个新对象：
                Complex c;
                Complex c1(c);
            2、值传递的方式给函数参数传值：
                void doWork(Complex c)  //相当于Complex c = c;
                {}
                doWork(c);
            3、以值方式返回局部对象
                Complex doWork()
                {
                    Complex c;
                    return c;       //在这一步同时完成拷贝和析构
                }
                doWork();   //匿名对象
                Complex c = doWork();   //两个运行结果一样
            结果：
                构造
                拷贝构造0
                xigou0
                xigou0

        4、调用规则：
            默认情况下，c++编译器至少给一个类添加3个函数
                1、默认构造函数
                2、默认析构函数
                3、默认拷贝函数，对属性进行值拷贝

            如果用户定义有参构造函数，c++则不提供默认无参构造，但会提供默认拷贝构造
            如果用户定义拷贝构造函数，c++则不会提供其他构造函数

        5、深拷贝与浅拷贝：
        浅拷贝带来的问题：堆区的内存重复释放（因为每个指针都指向了同一块地址，都不为空）
        如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题
        	Complex(const Complex &c)
	        {
		        a = c.a;
		        //b = c.b;  //编译器提供的浅拷贝，直接复制的地址
		        b = new int(*(c.b));	//深拷贝  （这里的b是int *）new对象返回的是堆中的地址
		        cout << "拷贝构造" << a << *b << endl;
	        }
            ~Complex()
	        {
		        if (b != NULL)
		        {
		        	delete b;
		        	b = NULL;
		        }
		        cout << "析构函数" << endl;
	        }

        6、初始化列表
            Complex(int a1, int b1)
                :a(a1), b(b1)
            {

            }

        二、析构函数：~类名(){}     //将堆区开辟数据做释放操作
            1、不可以有参数，因此不可以发生重载
            2、程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次

    5、对象成员：C++类中的成员可以时另一个类的对象，我们称该对象为
        当其他类对象作为本类成员，构造时先构造类对象，再构造自身；析构的顺序相反
        （调用另一个文件中的类当最对象成员，暂时不会）

    6、静态成员变量：
        1、所有对象都共享同一份数据
        2、编译阶段就分配内存
        3、类内声明，类外初始化操作（必须）
            Complex()
            {
            private:
	            int a = 0;
	            static int b;
            };
            int Complex::b = 2;
        若要类内声明，则必须是常量（原因不确定）
            Complex()
            {
            private:
	            int a = 0;
	            static const int b = 3; //必须要加const
            };
        4、访问：（同样有访问权限）
            1、通过对象进行访问：
            2、通过类名进行访问：
                Complex a(10);
	            cout << a.b << endl;
	            cout << Complex::b << endl;

    7、静态成员函数：（同样有访问权限，类外访问不到私有静态成员函数）
        1、所有对象共享一个函数
        2、静态成员函数只能访问静态成员变量（因为所有对象共享一个静态成员函数，所以调用时不知道该函数下的非静态变量是哪个对象的）
        3、访问：
            同静态成员变量：通过对象、类名进行访问

    
    8、成员变量和成员函数分开存储，只有非静态成员变量才属于类的对象上
        1、空对象占用内存空间为1
           C++编译器会给每个空对象也分配一个字节空间，是为了区分空对象占内存的位置，每个空对象也应该有一个独一无二的内存地址
        2、增加静态成员变量，函数，静态成员函数都不会改变对象的大小

    9、this指针
        每个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码

    10、空指针调用成员函数
        成员函数： void showP()
                    {
                        if(this == NULL)    //防止传入指针是NULL，提高代码健壮性
                            return;
                        cout << this->a <<endl;
                    }
        
        Complex *p = NULL;
        p.showP();  //可以访问

    11、常函数 void add() const{}
        class Person
        {
        public:
	        int i = 1;
	        mutable int j = 2;
                                //this指针的本质是 顶层const, 指向不可修改
            void Add() const    //成员函数后加const，修饰的是this指向，增加底层const，指向的值也不可以修改
	        {
              × this->i = 2;    //不可修改
		        this->j = 3;    //加了关键字mutable，可以修改
		        return;
	        }
        };

    12、常对象 const Person p;
        常对象只能修改 mutable 修饰的成员变量（mutable修饰的变量在常对象下也可以修改），可以调用其他变量
        常对象只能调用 const   修饰的成员函数（常函数），其他都不可调用

三、友元
    1、全局函数做友元
        全局定义函数，在类内任意地方（public private 都可以，都无法通过类对象调用）声明函数，前加friend修饰即可
        这个全局函数可以访问该类的私有成员
    2、类做友元
        在类中加 friend class Complex;

    3、成员函数做友元
        在类中加 friend void Complex::fr(); //（类定义在两个文件中有问题，一个文件中运行正常）

    友元不能被继承

四、运算符重载
    1、<< 重载一般不利用成员函数重载，如果用，形式则称 p << cout

    2、前置++ 和 后置++
        前置++：
            Circle& operator++ ()
	        {
		        ++this->m_r;
		        return *this;
	        }
            return by reference  ++（++a）
        后置++：
            Circle operator++ (int)     //重载后置++，参数必须是int型占位参数（设定）
	        {
		        //先保存
		        Circle c = *this;
		        //再加
		        ++this->m_r;
		        //再返回
		        return c;	//中间变量不能by reference
	        }
            return by value     (a++) 输出的是一个匿名对象，不可再进行操作

    3、函数调用运算符重载（因为重载后使用方式非常像函数的调用，故称为 仿函数）
        仿函数没有固定写法：
            int operator()(int a, int b)    //返回值、参数、代码体全都随意
	        { }
        调用：
            1、Person p;           
               p(100, 100)  
            
            2、Person()(100,100)    //匿名函数对象（Person类必须有无参构造）
        
五、继承
    1、语法： class 子类 : 继承方式（public、protect、private） 父类
            其中： 子类  也称为   派生类
                   父类  也称为   基类
    2、继承只是继承了父类中的定义

    3、继承方式：
        父类：   class A
                {
                    public:     int a;
                    protected:  int b;
                    private:    int c;
                };
        公共继承： class B : public A 
                    {
                        public:     int a;
                        protected:  int b;
            (不可继承)   private:    int c;
                    }; 
            继承了A中的public、protected定义
        
        保护继承：class C : protected A 
                    {
                        protected:  int a;
                        protected:  int b;
            (不可访问)   private:    int c;
                    }; 
            继承了A中的public、protected定义，并全部定义为protected
        
        私有继承：class D : private A 
                    {
                        private:    int a;
                        private:    int b;
            (不可访问)   private:    int c;
                    }; 
            继承了A中的public、protected定义，并全部定义为private
        
    实际上，父类中所有 非静态成员属性 都会被子类继承下去；其 私有成员属性 是被编译器给隐藏了，因此访问不到，但确实被继承下去了
    验证（查看对象模型）：
        打开vs开发人员命令提示符
        跳转文件路径
        查看命名
        cl /d1(一) reportSingleClassLayout类名 文件名
    
    4、继承中同名成员的处理：
        1、成员变量
            子类对象.a;         //调用子类同名变量a
            子类对象.父类::a;   //调用父类同名变量a
        2、成员函数
            子类对象.fun();         //调用子类同名函数fun
            子类对象.父类::fun();   //调用父类同名函数fun
        
        如果父类重载fun(int a)
            子类对象.fun();         //调用子类同名函数fun
            子类对象.父类::fun();   //调用父类同名函数fun
            子类对象.父类::fun(10); //调用父类同名函数fun(int a)
          × 子类对象.fun(10);       //如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类中所有同名成员函数

        3、静态成员：
            1、通过对象访问：（跟普通成员一样）
            2、通过类名访问：
                A::fun();
                B::fun();
                B::A::fun();    //通过子类作用域下的父类作用域下进行访问
            如果父类重载fun(int a)
                A::fun(100);    //A作用域下
              × B::fun(100);  //同上，会覆盖所有同名
                B::A::fun(100); //通过子类作用域下的父类作用域下进行访问

    5、多继承：
        语法：class A : 继承方式 B, 继承方式 C，继承方式 d

    6、菱形继承（钻石继承）：两个派生类继承同一个基类，又有某个类同时继承这两个派生类 
        class A
        {
        public:
        	int a=0;
        };
        class B1 : public A  {};
        class B2 : public A  {};
        class C : public B1, public B2  {};
    调用：
        C c;
	    c.B1::A::a = 1;
	    c.B2::A::a = 5;
	    c.B1::a = 2;
	    c.B2::a = 3;
	    cout << c.B1::A::a << "aaa" << endl;    //结果是 2 ，c.B1::A::a 就是  c.B1::a 
	    cout << c.B2::A::a << "aaa" << endl;    //3
	    cout << c.B1::a << "aaa" << endl;       //2
	    cout << c.B2::a << "aaa" << endl;       //3
        如此会造成资源浪费，用虚继承解决
    7、虚继承：继承之前加上关键字 virtual 变为虚继承，由此被继承的父类叫虚基类

        没加之前：
            class C size(8):
                    +---
            0      | +--- (base class B1)
            0      | | +--- (base class A)
            0      | | | a
                   | | +---
                   | +---
            4      | +--- (base class B2)
            4      | | +--- (base class A)
            4      | | | a
                   | | +---
               | +---
                       +---

        加virtual之后：（在同时继承一个父类的多个子类加）
            class C size(12):
                    +---
            0      | +--- (base class B1)
            0      | | {vbptr}       virtual(虚) base(基类) pointer(指针)  //{vbptr} 指向vbtable(虚基类表)
                    | +---
            4      | +--- (base class B2)
            4      | | {vbptr}
                    | +---
                    +---
                    +--- (virtual base A)
            8      | a
                    +---
            C::$vbtable@B1@:
            0      | 0
            1      | 8 (Cd(B1+0)A)       //偏移量，vbptr+8 = 0+8 = 8(a所在位置)

            C::$vbtable@B2@:
            0      | 0
            1      | 4 (Cd(B2+0)A)       //同理，vbptr+4 = 4+4 = 8(a所在位置)

            此时继承的不是两个父类的数据，而是父类数据的指针，通过指针找到数据

        结果：
            C c;
	        c.A::a = 2;     //也可以这样调用a
	        c.B1::a = 3;
	        c.B2::a = 5;
            c.a；   //也可以直接调用
            全部都是55555

六、多态：
    1、静态多态和动态多态
        静态多态：函数重载 和 运算符重载属于静态多态（函数地址早绑定，编译阶段确定函数地址）
        动态多态：派生类和虚函数实现运行时多态（函数地址晚绑定，运行阶段确定函数地址）
        满足条件：
            1、有继承关系
            2、子类重写父类的虚函数

        动态多态使用：父类的指针或引用  指向子类对象  Animal * an = new Dog;
            父类：  virtual void speak(){}
            子类：  void speak(){}
            函数：  void use_speak(Animal &animal){animal.speak();}
            调用：  Dog dog; 
                   use_speak(dog);

        内部实现：
        父类：（函数指针指向&Animal::speak）
            class Animal    size(4):
                    +---
             0      | {vfptr}
                    +---
            Animal::$vftable@:
                    | &Animal_meta
                    |  0
             0      | &Animal::speak

        没重写虚函数的子类：（函数指针指向&Animal::speak）
            class Dog       size(4):
                    +---
             0      | +--- (base class Animal)
             0      | | {vfptr}
                    | +---
                    +---
            Dog::$vftable@:
                    | &Dog_meta
                    |  0
             0      | &Animal::speak
        重写虚函数的子类：（函数指针指向&Dog::speak）
            class Dog       size(4):
                    +---
             0      | +--- (base class Animal)
             0      | | {vfptr}
                    | +---
                    +---
            Dog::$vftable@:
                    | &Dog_meta
                    |  0
             0      | &Dog::speak

        静态绑定：如果一个基础类指针指向一个派生类对象，那么经由该指针只能访问基础类定义的函数
                 如果派生类重写了基础类的成员函数，那么通过对象指针调用该函数时，根据指针的原型来确定
        动态绑定：有虚函数的继承，父类指针指向子类对象（就叫做多态实现）

    2、纯虚函数：
        virtual void fun() = 0;
    3、抽象类：只要有一个纯虚函数，这个类就称为抽象类
        特点：
            1、无法实例化对象
            2、抽象类的子类必须要重写父类中的纯虚函数，否则也属于抽象类

    4、虚析构：virtual ~Person () { }
        父类指针指向子类对象时，无法调用子类的析构函数，故父类的析构要写成虚析构或纯虚析构

    5、纯虚析构：virtual ~Person() = 0;
                Person::~Person() { }   //必须要实现
                
        总结：
            虚构或纯虚析构就是用来解决通过父类指针释放子类对象
            如果子类中没有堆区数据，可以不写为虚析构或纯虚析构
            有纯虚析构函数的类也属于抽象类
        
七、文件操作：
    文件类型：
        1、文本文件：以文本的ASCII码形式存储在计算机中
        2、二进制文件：以文本的二进制形式存储在计算机中
    操作文件的三大类：
        写操作：ofstream
        读操作：ifstream
        读写操作：fstream
    
    1、文本文件
        1、写文件步骤：
            1、头文件：#include <fstream>
            2、创建流对象：ofstream ofs;
            3、打开文件：ofs.open("文件路径",打开方式); //要加ios:: 作用域
                ios::in     //为读打开
                ios::out    //为写打开
                ios::ate    //初始位置：文件尾
                ios::app    //追加写
                ios::trunc  //如果文件存在，先删除再创建
                ios::binary //二进制方式
                文件打开方式可以配合使用：
                    ofs.open("text.txt",ios::binary | ios::ate)
            4、写数据：ofs << "" << endl;
            5、关闭文件：ofs.close();

        2、读文件步骤：
            1、头文件：#include <fstream>
            2、创建流对象：ifstream ifs;
            3、打开文件：ifs.open("文件路径",打开方式); //要加ios:: 作用域
            4、判断文件是否成功打开：
                if (! ifs.is_open()) {
		            cout << "文件打开失败" << endl;
	            }
            4、读数据：
                方法一：
	                char a[1024] = { 0 };  
	                while (ifs >> a)	//一块一块读
	                {
		                cout << a << endl;  ////不读空格，不读换行符
	                }
	            方法二
	                char a[1024] = { 0 };
	                while (ifs.getline(a, sizeof(a)))	//一行一行读
		                cout << a << endl;  ////读空格，不读换行符
	            方法三
	                string buf;
	                while (getline(ifs, buf))       //一行一行读
	                {
		                cout << buf;	//读空格，不读换行符
	                }
	            方法四
	                char c;
	                while ( (c = ifs.get()) != EOF)	//EOF end of file   一个一个读，效率低不推荐
	                {
	                	cout << c;		//换行符也读出来
	                }
            5、关闭文件：ifs.close();
    
    2、二进制文件
        1、写文件步骤：
            1、头文件：#include <fstream>
            2、创建流对象：ofstream ofs;
            3、打开文件：
                ofstream ofs("person.txt", ios::out | ios::binary); //构造函数
                ofs.open("person.txt", ios::out | ios::binary);
            4、写数据：ofs.write((const char *)&p, sizeof(Person));  //要将传入的地址转换成const char *类型
            5、关闭文件：ofs.close();
        传入的数据(Person)最好用char类型写，不要用string（容易出现问题）

        2、读文件步骤：
            1、头文件：#include <fstream>
            2、创建流对象：ifstream ifs;
            3、打开文件：ifs.open("person.txt", ios::in | ios::binary);
            4、判断文件是否成功打开：
                if (! ifs.is_open()) {
		            cout << "文件打开失败" << endl;
	            }
            4、读数据：
                Person p;
	            ifs.read((char *)&p, sizeof(p));        //取出的数据转换成char *
                cout << p.m_Age << p.m_Name << endl;
            5、关闭文件：ifs.close();


Bug：
1、error C3646: “cir”: 未知重写说明符
    在1.h中#include了2.h， 然后在2.h中又#include了1.h
2、“ostream”: 不允许在数据声明中使用“friend”
    文件顶部加上：
        #include <iostream>
        using namespace std;
c++黑马提高笔记
泛型编程
    一、函数模板
        1、语法：
            template<typename T>
            函数声明或定义
            
            template<typename T>
            void mySwap(T &a, T &b)
            {
                T c = a;
                a = b;
                b = c;
            }

        2、调用：
            //自动类型推导
            mySwap(a, b);
            cout << a << b << endl;
            //显示指定类型
            mySwap<int>(a, b);

        3、模板必须确定出T的数据类型才可以使用
            template<typename T>
            void aaa()
            {
                cout << 555 << endl;
            }
            aaa();          //错误，没有确定T的数据类型
            aaa<int>();     //正确，<任意数据类型都可以，类名也可以>

        4、普通函数与函数模板的区别：
            1、普通函数调用时可以发生自动类型转换（隐式类型转换）
                void fun(int a, int b){return a+b;}
                double a,b;
                fun(a,b);
            2、函数模板调用时：
                如果是自动类型推导，则不能发生隐式类型转换

                如果是显示类型推导，则可以发生隐式类型转换（如果是引用接收，也不可以）

        5、普通函数与函数模板的调用规则：
            template<typename T>
            void mySwap(T a, T b) { cout << 111 << endl; }
            
            void mySwap(int a, int b) { cout << 222 << endl; }
            
            template<typename T>
            void mySwap(T a, T b, T c)  { cout << 333 << endl; }

            //1、函数模板和普通函数都可以调用，优先调用普通函数
                mySwap(1, 2);
            //2、通过空模板参数列表(或任意参数)来强制调用函数模板
                mySwap<>(1, 2);
            //3、函数模板也可以发生重载
                mySwap(1, 1, 1);
            //4、如果函数模板可以产生更好的匹配(普通函数传参时发生类型转换)，优先调用函数模板
                mySwap('a', 'b');

            提供了函数模板就不要再提供普通函数了，没意义

        6、模板的局限性
            template<typename T>
            bool aaa(T a, T b)
            {
                return a < b ? true : false;
            }
            template<> bool aaa(A a, A b)   //具体化模板，加了template<>后aaa<>()也可以调用这个
            {
                if (a.aa < b.aa)
                    return true;
                else false;
            }
            bool c = aaa(1, 2);
            A a, b;
            c = aaa<>(a, b);
    
    二、类模板
        1、语法：
            template<class NameType, class AgeType>
            class A
            {
            public:
                A(NameType n, AgeType a):name(n), age(a){}
                NameType name;
                AgeType age;
            };
            A<string, int> a("aaa", 18);
        
        2、类模板与函数模板的区别：
            1、类模板没有自动类型推导，必须在参数列表中指定类型

            2、类模板在模板参数列表中可以有默认参数
                template<class NameType, class AgeType = int>
                A<string> a("aaa", 18);

        3、类模板中的成员函数在调用时才创建， 普通类中的成员函数一开始就可以创建
            template<class tbbb>
            class A
            {
            public:
                T obj;
                void fun()
                {
                    obj.sdhfjhd();  //函数名随便写同样可以编译成功
                }
                
            };

        4、类模板对象做函数参数
            1、指定参数类型（常用）
                void fun(A<string, int>&a)
                {
                    cout << a.name << endl;
                }
            2、参数模板化，将对象中的参数变为模板进行传递
                template<typename T1, typename T2>
                void fun1(A<T1, T2>& a)
                {
                    cout << a.name << endl;
                }
            3、整个类模板化，将这个对象类型模板化进行传递
                template<class T>
                void fun2(T &a)
                {
                    cout << a.name << endl;
                }

        5、类模板与继承：
            1、子类必须知道父类中的T类型，才能继承
                class B :public A<int ,int >
                {   };
            2、或者将父类中的T类型再变成模板
                template<class T3, class T4>        //只要加这个就行
                class B :public A<T3,T4 >
                {
                    int a;
                };

        6、类模板 成员函数 类外实现：
            template<class T1, class T2>
            A<T1, T2>::A(T1 n, T2 a){}
            
            template<class T1, class T2>
            void A<T1, T2>::fff() {}

        7、类模板分文件编写：.h  .cpp
            问题：类模板中成员函数在调用阶段才创建，导致分文件在编写时链接不到（编译成功无法链接）
            解决：
                1、直接包含.cpp源文件（.cpp中也包含了.h，所以相当于写在一起了）
                2、将声明和实现写到同一个文件中，并更改后缀名为.hpp，.hpp是约定的名称（类模板）不是强制

        8、类模板与友元
            1、全局函数类内实现：
                直接声明
                friend void fff(A<T1, T2> aa)
                {
                    cout << aa.name << endl;
                }

            2、全局函数类外实现：
                类外：
                //要让友元函数先知道类
                template<class T1, class T2>
                class A;

                //要先让编译器知道这个函数，那个是声明友元函数的声明
                template<class T1, class T2>
                void ffff(A<T1, T2> aa){}
                
                类中：
                //这是函数模板，加<>
	            friend void ffff<>(A<T1, T2> aa);


STL
    一、string：
        1、字符串的构造：
            1、默认构造
                string s1;	
            2、用字符串初始化   string s2(const char *s)
                const char *s = "hello world";
	            string s2(s);
            3、拷贝构造         string s2(const string& str)
                string s3(s2);
            4、使用n个字符c初始化
                string s4(10, 'a');     //aaaaaaaaaa
	
        2、字符串赋值
            1、 = 赋值
                sting& operator=(const char*s)  str1=("hello world");
                sting& operator=(const string &s)  str2=str1;
                sting& operator=(char c)        str3 = 'a';
            2、assing 赋值
                string& assign(const char *s)   s1.assign("hello world");
	                                            s1.assign(s2);
	                                            s1.assign(5, 'a');  //aaaaa
                                                s1.assign("hello world", 7);    //hello w

        3、字符串拼接（字符串下标也都是从0开始）
            1、+= 重载
                str1 += "我";
                str1 += ':';
                str1 += str2;

            2、append 拼接
                str1.append("爱");
                str1.append(str2); 
                str1.append("ni ya", 4);    //ni y  前四个字符
                str1.append("hhh hehehe", 0, 2);    //hh，从第0个位置截取两个
                str1.append("str2", 5, 2);    //eh，从第5个位置截取两个(str2 不能 等于 str1)

        4、查找
            1、find
                int find（const string& str， int pos = 0）const;
                查找str第一次出现位置，从pos开始查找
                int pos = s3.find("he");        //未找到返回-1

                int find（const char *s， int pos, int n）const;
                从pos位置查找 s的前n个字符 第一次出现的位置
                其他都差不多
            2、rfind
                区别：rfind从右往左查找，find从左往右，用法一样
        5、替换
            string& replace (int pos, int n, 字符串str);  //替换从pos开始n个字符为字符串str
            将从1号位置起 的2个字符 替换为"aaaa"
	        s3.replace(1, 2, "aaaa");
        6、比较
            str1.compare(str2)
            比较ASCII码
                = 返回 0
                > 返回 1
                < 返回 -1
        7、访问
            1、str[i]
            2、str.at(i)
        8、插入
            str.insert(pos, s);   //在第pos个位置插入字符串s
            str.insert(pos, n, c);   //在第pos个位置插入n个字符c
        9、删除
            str.erase(pos, n);  //删除从pos开始的个字符
        10、子串
            str.substr(int pos= 0, int n = npos)const;   //返回由pos开始的n个字符组成的字符串，npos就是全部


    二、vector:
        vector是动态扩展：不是在原空间后接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间
        vector迭代器是支持随机访问的迭代器
        1、迭代器遍历
            1、for (vector<int>::iterator it = a.begin(); it != a.end(); it++)
                {
                    cout << *it << endl;
                }
            2、for_each(a.begin(), a.end(), pp<int>); // pp是打印函数，传函数名即可，如果是模板类型则必须明确参数列表

        2、构造函数：
            1、默认构造：
                vector<T> v1;
            2、通过区间方式构造：
                vector<T> v2(v1.begin(), v2.end());
            3、n个elem方式构造：
                vector<int> v3(10,100); //10个100
            4、拷贝构造：
                vector<T> v4(v1);

        3、赋值：
            1、vector<int> a2 = a;
            2、a3.assign(a.begin(), a.end());
            3、a4.assign(10, 100);

        4、容量和大小：
            a.empty();          //判断容器是否为空
            a.resize(30);		//重新指定容器元素的长度，超出以默认值填充（超出容器大小则按照一定规律增加容器大小，没超出容器大小则容器长度不变）
                                //变短则直接删除尾部超出的部分，无法访问
            a.resize(30, elem); //超出部分以elem值填充
            a.capacity();       //返回容器的容量
            a.size();           //返回容器中的个数
        
        5、插入和删除
            push_back(ele);     //尾部插入ele
            pop_back();         //删除最后一个元素
            
            第一个参数必须是迭代器
            a.insert(++a.begin(), 100);     //在++begin这个位置插入一百
            a.insert(a.begin(),2, 200);     //在开头插入2个200
            a.insert(a.begin(), a1.begin(), a1.end());  //在开头插入区间元素
            a.erase(++a.begin(), a.end());  //清楚两个迭代器之间的元素
            a.erase(++a.begin());      //删除某个位置的元素
            a.clear();                      //清空a
            
            
            

        6、数据存取
            a.at(2);
            a[2];
            a.front();      //返回第一个元素
            a.back();       //返回最后一个元素

        7、互换容器：
            v1.swap(v2);    //将两个容器互换
            
        应用：收缩内存
            在rsize缩小后，容器大小不变
            vector<int> (v1).swap(v1);
            其中  vector<int> (v1)  是构造跟v1一样的匿名对象，容器跟v1.size()一样大，然后调用swap，最后匿名对象自动释放空间

        8、预留空间：可以防止容器多次动态扩展
            v1.reserve(n);

    三、deque容器：双端数组，可以对头端进行插入删除操作
        deque与vector区别：
            vector头部插入删除效率低，数据量越大效率越低
            deque头部操作相对效率较高
            vector访问元素速度要比deque快
        1、构造函数
            与vector一样
        2、赋值
            与vector一样
        4、大小
            与vector一样，但没有获取容器大小的操作
        5、插入和删除
            与vector一样，多了头插，头删
        6、数据存取
            与vector一样

    四、stack   栈
        特点：先进后出，不允许有遍历行为
        stack<int> s;
	    stack<int> s1 = s;
        stack<int> s2(s);

        s.push(elem);
        s.pop();
        int t = s.top();

        s.empty();
        s.size();

    五、queue
        特点：先进先出；只有队头队尾能被访问，故也不允许有遍历行为
        操作：
            queue<int> q;
            queue<int> q1 = q;
            queue<int> q2(q);

            q.push(20);
            q.pop();
            cout << q.front() << endl;
            cout << q2.back() << endl;

            q.swap();
            q.empty();
            q.size();

    六、list
        STL中的链表是一个双向循环链表
        list中的迭代器支持前移和后移，属于双向迭代器
        list插入和删除操作，都不会造成原有list迭代器的失效，而vector不成立

        一、构造
            list<int> L1;
            list<int> L2(L1.begin(),L1.end());
	        list<int> L3 = L1;
            list<int> L4(10,100);
        二、赋值和交换：
            L1.assign(L4.begin(), L4.end());
	        L2.assign(10, 100);
	        L3.swap(L4);
            list<int> L4;
            L4 = L1;
        三、大小
            L1.size();
            L2.empty();
            L1.resize(20);
            L1.resize(30,5);
        四、插入和删除
            头尾都可操作，与deque一样
            多了一个remove，只有他提供的参数是elem，其他都是迭代器位置
                L1.remove(5);   //将链表中所有5的元素删掉
        五、数据存取，不支持随机访问的，其迭代器也不支持随机访问
            L1.front();
	        L2.back();
        六、反转排序
            L1.reserve();
            L1.sort();      //升序
            所有不支持随机访问迭代器的容器，不可以使用标准算法sort()
            其内部会提供对应的一些算法 L1.sort();
            
    七、set/multiset容器（关联式容器，底层结构是二叉树实现）
        特点：所有元素都会在插入时自动被排序

        一、构造和赋值
            set<int> s1;
	        set<int> s2(s1);
	        set<int> s3 = s2;

        二、大小和交换，不允许重新指定大小
            size();
            empty();
            swap();

        三、插入和删除
            set.insert(10);
            set.clear();
            s1.erase(s1.begin());
            s1.erase(s1.begin(), s1.end());
	        s1.erase(50);

        四、查找和统计
            find(key);  //查找key是否存在，若存在返回该键的元素的迭代器，若不存在返回set.end();
            count(key); //返回元素key的个数

        五、区别：
            set不允许容器中有重复的元素
            multiset允许有重复的元素

    pair对组（成对出现的数据，利用对组可以返回两个数据）
        创建：
            pair<string, int> p("tom", 20);
	        pair<int, string> p = make_pair(18, "aaa");

        六、排序：
            利用仿函数可以指定set容器的排序规则
            class My_Compare1
            {
            public:
                bool operator() (int a, int b)
                {
                    return a > b;
                }
            };
            set<int, My_Compare1> s1;

            对于自定义数据类型，set必须指定排序规则才可以插入数据


    八、map/multimap容器（关联性数组，底层结构是二叉树实现）
        map元素中都是pair
        pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）
        所有元素都会根据元素的键值自动排序

        可以根据key值快速找到value值（目前认为是哈希，后续再看）

        区别：map不可重复key值，multimap可有重复key值


        map<int, int> m;
	    m.insert(pair<int, int>(1, 10));
        m.insert(make_pair("dd", 40));
	    m.insert(map<string, int>::value_type("ff", 50));
        
        //[]不建议插入。用途：可以利用key访问value
        m1["aa"] = 50;
        cout << m1["ddd"] << endl;
        如果没有键值ddd，则会自动在m1容器中插入一个键值为ddd，值为0的元素，并打印0

        empty();
        size();
        swap();
        clear();
        earse(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器
        earse(beg,end); //删除区间[) 元素，并返回下一个元素的迭代器
        earse(key); //键值为key的元素
        find(key);  //key存在返回该键元素的迭代器，不存在返回end();
        count(key); //统计key的元素个数

        排序跟set一样

    九、函数对象
        重载函数调用操作符的类，其对象成为函数对象
        函数对象使用重载的（）时，叫仿函数
        一、形式
            int operator()(int v1, int v2)
            {

            }

        二、谓词
            返回bool类型的仿函数称为谓词
            如果operator接受一个参数，一元谓词
            class GreaterFive
            {
            public:
                bool operator()(int val)
                {
                    return val > 5;
                }
            };
            vector<int>::iterator it = find_if(v.begin(), v.end(), GreaterFive());

            如果operator接受两个参数，二元谓词
            class My_Compare1
            {
            public:
                bool operator() (int a, int b)
                {
                    return a > b;
                }
            };
            sort(v.begin(), v.end(), My_Compare1());

        三、内建函数对象
            算数仿函数：
                plus<int> p;    //加法
                p(10, 2);
                negate<int> n;  //取反
                n(10);
            关系仿函数：
                sort(v.begin(), v.end(), greater<int>()); //大于
                greater<int> g;
                g(10, 20);
            逻辑仿函数：
                logical_and<int> l; //逻辑与
                
    十、STL常用算法
        头文件：
            <algorithm> ：比较、交换、查找、遍历、复制、修改
            <functional>：定义了一些模板类，用以声明函数对象
            <numeric>   ：体积很小，只包括几个在序列上面进行简单数学运算的模板函数


        一、遍历算法
            遍历每个元素
            for_each(v.begin(), v.end(), print);
            for_each(v.begin(), v.end(), print02());
            
            搬运容器到另一个容器中
            transform(v.begin(), v.end(), v2.begin(), negate<int>());

        二、查找算法
            find
                ::iterator it = find(v.begin(), v.end(), value);     //查找元素
                查找自定义类型时，要重载==
            find_if
                find_if(v.begin(), v.end(), _Pred);  //按条件查找
                _Pred 函数或者谓词（返回bool类型的仿函数）
            adjacent_find
                ::iterator it = adjacent_find(v.begin(), v.end());    //查找相邻重复元素
            binary_search   
                bool b = binary_search(v.begin(), v.end(), value);    //查找指定元素是否存在，二分查找法
                必须在有序列表中查
            count
                int num = count(v.begin(), v.end(), value);    //统计元素个数
                自定义类型，要重载== ，返回bool类型
            count_if
                int num = count_if(v.begin(), v.end(), _Pred); //按条件统计元素个数

        三、排序算法
            sort
                sort(v.begin(), v.end(), _Pred);
                _Pred可填可不填，默认升序
            random_shuffle  洗牌，指定范围内的元素随机调整次序
                random_shuffle(v.begin(), v.end());
            merge   两个有序容器合并，并存储到另一个有序容器
                merge(v.begin(), v.end(), v1.begin(), v1.end(), v3.begin());
            reverse     反转
                reverse(v.begin(), v.end());

        四、拷贝和替换算法
            copy    //指定范围拷贝到另一个
                copy(v.begin(), v.end(), v1.begin());
            replace     //指定范围的旧元素修改为新元素
                replace(v.begin(), v.end(), oldvalue, newvalue);
            replace_if  //将区间内满足条件的元素，替换成指定元素
                replace_if(v.begin(), v.end(), _pred, newvalue);
            swap    //互换两个容器的元素
                swap(container c1, container c2);

        五、算术生成算法    头文件#include<numeric>
            accumulate  //计算区间内元素总和
                int total = accumulate(v.begin(), v.end(), value);
                value是起始累加值
            fill    //向容器中填充指定的元素
                fill(v.begin(), v.end(), value);
            
        六、集合算法
            set_intersection    //取交集，两个序列必须有序，无序报错
                vector<int>::iterator it = set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), v.begin());
                it是最后的迭代器指针
            set_union   //取并集，两个序列必须有序，无序报错
                vector<int>::iterator it = set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), v.begin());
            set_difference  //取差集，两个序列必须有序，无序报错
                vector<int>::iterator it = set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), v.begin());


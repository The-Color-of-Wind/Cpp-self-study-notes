侯捷 c++11 新特性

一、引言
    标准库的头文件不带.h===<vector>
    系统函数头文件把<stdio.h> 改成 <cstdio> （前面加c）

    了解编译器对c++2.0的支持度

    查c++
        cplusplus.com   
        cppreference.com/w/
        gcc.gnu.org

    Grep 2.3  选一个顺手的全文检索工具（查看源代码）

二、Variadic Templates




三、nullptr
    nullptr，穿参空指针
    NULL,0，传参变量

四、auto
    auto:初始化时不定义变量类型，编译器给你定义
        一般用迭代器的时候，可以直接auto， 不用写太长

五、initializer_list:
        统一初始化，都可以用{}来赋值
            int a[]{1,2,3};
            vector<int> v{2,3,4,5};
            vector<string> c{"aaa", "bbb","ccc"};
            complex<double> c{3.0, 4.0};

        {"aaa", "bbb","ccc"}        {}其实就是形成一包==initializer_list<T>
            形成一个initializer_list<string>, 背后有个array<string, 3>(类似[]数组容器，方便STL算法调用)，调用vector<string>ctors(一个调用函数) 时
            编译器找到了一个vector<string>ctor 接收initializer_list<string>， 所有容器皆如此
            (pu：容器内部有initializer_list<T>构造)
        

        {3.0, 4.0}
            形成一个initializer_list<double>, 背后有个array<double, 2>，调用complex<double>ctor 时
            array内的2个元素被分解传给ctor
            complex<doubel>并无任何ctor接收initializer_list
            (pu:类里没有initializer_list<T>构造，编译器帮你拆分{})

            int i;      无定义
            int i{};    0
            int* p;     无定义
            int* q{};   nullptr

            int x1(5.3);    5
            int x2 = 5.3;   5
            int x3{5.3};    ERROR
            int x4 = {5.3}; ERROR
            {}赋值，里面的数值类型必须要与定义的类型一致（编译的时候好像只会警告）


            void print1(initializer_list<int> vals)
            {
                for (auto p = vals.begin(); p != vals.end(); ++p) {
                    cout << *p << endl;
                }
            }
            print1({12,3,2,5,4,7,8});   //数量可变，类型只能与函数参数类型一致

        max({1,2,3});
        min({"aa","ab","cc"});
        之前只能放两个，现在可以放很多元素比较，内部也是min(initializer_list<T> __l){}

六、explicit(明确的)
    2.0之前的用法：
    针对构造函数一个实参(只需要传入一个实参)
        class C{
            explicit C(int a, int b = 0):real(a),imag(b) {}
        };
        Complex c2 = c1+5;
        避免编译器 将5 隐式构造 成(5,0)

    2.0
    针对构造函数一个以上的实参



七、for循环
    for(decl : coll){
        statement
    }
    将coll容器中的元素，依次赋值给decl
    for(int i : {2,3,5,7,9}){
        cout << i << endl;
    }
    for (auto& elem : vec){
        elem *= 3;
    }

八、=default =delete
    class Zoo
    {
    public:
        Zoo(const Zoo&) = delete;   //禁止这个函数
        Zoo(Zoo&&) = default;   //即使我构造了，但我还是要编译器给我的默认空构造
                            //包括构造函数，拷贝构造，拷贝赋值，析构函数，编译器都有默认构造
    };

九、Alias Template
    template<typename T>
    using Vec = std::vector<T, MyAlloc<T>>;

    Vec<int> coll;  == vector<int, MyAlloc<int>>;







一、Lambdas
    1、格式：
        [...](...)mutable throw() -> retType {...}

        [] ==> 捕获列表
        () ==> 参数列表，如果all mutable throwSpec -> retType 都没有，则可省略
        mutable ==> []里的参数 可改变（没写 改变 就会报错）
        throw() ==> 抛出异常
        -> retType ==> 返回类型
        {} ==> 函数体

        auto fx = [id] () mutable
            {
                cout<<id<<endl;
                ++id;
            };

    2、lambdas与decltype的配合使用
        lambdas返回的是一个函数对象，如果要得到它的类型，就需要decltype

    3、如果lambdas当作仿函数自定义排序顺序
        auto cmp = [](const Person& p1, const Person& p2){
                    return ......
                    }；
        set<Person, decltype(cmp)> coll(cmp);
        //其中 coll(cmp)  =====  set(const Compare& comp) : t(comp){}
        //coll构造函数必须传递cmp，（ coll(cmp) ）否则set会创建调用 decltype(cmp) 的默认构造  ，但lambdas没有默认构造函数，也没有赋值操作，故编译器报错
